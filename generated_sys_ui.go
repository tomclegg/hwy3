package main

import "github.com/tomclegg/canfs"

var sysUI = canfs.FileSystem{Content: map[string]canfs.FileInfo{
	"/app.js":     {N: "app.js", M: 0x1a4, S: 2497, MT: 1539155876898908710, FileData: canfs.StringData{Data: "var stats = m.stream({})\nfunction updateStats() {\n    if (window.document.visibilityState == 'visible')\n        m.request('/sys/stats').then(stats)\n}\nwindow.setInterval(updateStats, 2000)\nupdateStats()\n\nvar channels = stats.map(function(stats) {\n    var scale = 1000000000/stats.SampleIntervalNS\n    var now = new Date().valueOf()\n    var channels = []\n    for (var ch in stats.ChannelBytes) {\n        var data = []\n        var total = 0\n        var avg = 0\n        stats.ChannelBytes[ch].slice(1).forEach(function(count, i) {\n            total+=count\n            if (count>0) avg=i+1\n        })\n        if (avg>0) avg = Math.floor(total/avg*scale)\n        stats.ChannelBytes[ch].slice(1).forEach(function(count, i) {\n            data.unshift([new Date(now-(i+1)*stats.SampleIntervalNS/1000000), count*scale, avg])\n        })\n        channels.push({\n            key: ch,\n            data: data,\n            options: {\n                labels: ['time', 'inst', 'avg'],\n            },\n        })\n    }\n    return channels\n})\n\nvar dash = {\n    view: function(vnode) {\n        return (\n            m('.channels', channels().map(function(channel) {\n                return m('div', {\n                    key: channel.key,\n                }, [\n                    m('h3.label', m('a', {\n                        id: channel.key,\n                        href: channel.key.indexOf('output:/')==0 && channel.key.slice(7),\n                        target: '_blank',\n                    }, channel.key)),\n                    m('.graph', {\n                        channel: channel,\n                        style: {\n                            width: '800px',\n                            height: '100px',\n                        },\n                        oncreate: function(vnode) {\n                            vnode.state.g = new Dygraph(vnode.dom, vnode.attrs.channel.data, vnode.attrs.channel.options)\n                        },\n                        onupdate: function(vnode) {\n                            if (window.document.visibilityState == 'visible')\n                                vnode.state.g.updateOptions({file: vnode.attrs.channel.data})\n                            // else https://github.com/danvk/dygraphs/issues/827\n                        },\n                        onremove: function(vnode) {\n                            vnode.state.g.destroy()\n                        },\n                    }),\n                ])\n            })))\n    },\n}\n\nm.route(document.body, \"/\", {\n    \"/\": dash,\n})\n"}},
	"/index.html": {N: "index.html", M: 0x1a4, S: 355, MT: 1539155876898908710, FileData: canfs.StringData{Data: "<body>\n  <script src=\"//cdnjs.cloudflare.com/ajax/libs/dygraph/2.0.0/dygraph.min.js\"></script>\n  <link rel=\"stylesheet\" src=\"//cdnjs.cloudflare.com/ajax/libs/dygraph/2.0.0/dygraph.min.css\" />\n  <script src=\"//unpkg.com/mithril@1.1.6/mithril.js\"></script>\n  <script src=\"//unpkg.com/mithril-stream@1.1.0\"></script>\n  <script src=\"app.js\"></script>\n</body>\n"}},
}}
