package main

import (
	"bytes"
	"io"
	"testing"

	check "gopkg.in/check.v1"
)

func Test(t *testing.T) { check.TestingT(t) }

type Suite struct{}

var _ = check.Suite(&Suite{})

var frame1 = "\xff\xfb\x52\xc4\x00\x00\x0a\xe2\x40\xdc\x18\xd6\x80\x01\x65" +
	"\x48\x27\xc3\x18\x20\x00\xf1\x18\x03\x5f\x80\x11\xc0\x52\xf0\x5c" +
	"\x01\xbf\xe0\xce\x17\x0f\xc2\xf6\x2d\x88\x3f\xe1\xcf\x12\x23\xc0" +
	"\x73\xff\xe2\xd8\x6c\x1c\xe4\x32\x53\xff\xcd\xcb\x4d\x13\x37\x43" +
	"\xff\xf6\xac\xdc\xa4\x68\x5f\xff\xff\xcd\xd0\xbd\xcf\x9a\x7f\xff" +
	"\xff\x49\x13\x73\x72\xe3\x33\xa1\xff\xff\xff\xff\x74\x2c\xec\xcf" +
	"\x52\xcd\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xd5\xe0\x65" +
	"\x04\x31\x37\xf7\xce\x9c\xab\x17\x96\xb1\x4f\x9e\x08\xce\x5e\x70" +
	"\x33\x0d\xcf\x90\x42\x0b\x10\x54\x09\xde\x63\xa3\x0e\xee\x64\x7f" +
	"\xd5\x9e\x40\x85\x21\x2f\xfe\x59\x2f\x9b\x62\xb2\x7f\xe8\x33\x5c" +
	"\xd2\x3b\x94\xec\x97\x6f\xfe\x85\x44\x76\x57\xec\x47\x22\x73\xaa" +
	"\x7f\xff\xa2\xe7\xab\xec\xfd\x97\x25\x0e\xca\xff\xff\xff\xff\xff" +
	"\xff\xff\xff\xff\xff\xff\xc0\x0c\x34\x84\xb0\x66\x6f\xb9\xc6\x93" +
	"\x9d\xb1"
var frame2 = "\xff\xfb\x52\xc4\x05\x80\x0b\xa2\x41\x42\x18\x91\x00\x01\x57" +
	"\x26\xe8\xf7\x9e\x30\x01\x52\xc5\x3a\x98\xa1\x9c\xc7\x53\x29\x1c" +
	"\x4e\x4a\x8c\x75\x99\xd1\x53\x9c\xea\x91\x52\x35\x2b\xd0\xf4\xea" +
	"\xea\xc8\x95\x94\xae\xee\x54\x3b\xab\xb1\x95\xae\xa1\x69\x95\x18" +
	"\xc5\xbd\xa5\xd2\x77\x2a\x6e\xd5\x54\xd1\xe9\x76\xfa\x3e\xbd\xfb" +
	"\x32\xa5\xd3\x6b\x13\xdd\x9f\x64\xb1\x69\xed\x46\xfd\x3f\xff\xff" +
	"\xff\xff\xff\xff\xff\xff\xff\xff\x92\x78\x9c\x84\xb4\xdb\x6e\x40" +
	"\x62\x9f\xa4\xd5\x50\xa2\xca\x78\xbe\xcb\xf5\xba\xcf\x6b\xd3\x07" +
	"\xae\xfd\xec\xec\x5a\xf0\xd8\x11\x65\xae\x6c\x52\xd6\x84\x6e\x9a" +
	"\x43\xc9\x3e\x26\x75\x2a\x37\xc9\xe4\x55\x6e\x94\xbe\x9f\x1f\x94" +
	"\xf9\xd1\xde\x4c\xcb\x37\xcc\x94\x8b\x8b\x41\x7d\xca\x97\xaa\xf4" +
	"\xc5\x5e\xd3\xc7\x84\x0a\x9f\x02\x8b\xc4\x03\xa9\x98\xcc\x8f\x44" +
	"\x0a\x20\xb1\x3d\x41\x35\x81\x09\x09\x2e\x85\xfd\x50\x90\xa4\x7c" +
	"\xf5\x32"

func (s *Suite) TestSmallBuffer(c *check.C) {
	s.try(c, frame1+frame2)
}

func (s *Suite) TestMP3ReaderSkipJunk(c *check.C) {
	s.try(c, "f"+frame1+"oo"+frame2+"bar")
	s.try(c, "foobar"+frame1+"b"+frame2+"az")
}

func (s *Suite) TestMP3ReaderSkipPartialFrame(c *check.C) {
	s.try(c, frame1[200:]+frame1+"b"+frame2+"az")
}

func (s *Suite) try(c *check.C, in string) {
	buf := &bytes.Buffer{}
	mw := &MP3Writer{Writer: buf}
	io.WriteString(mw, in)
	mw.Close()
	c.Check(buf.String(), check.Equals, frame1+frame2)
}
